#!/bin/bash

OPTIONS=""
USERNAME=""
VALID="a|d|h|n|s|t|u"

# A function to ensure that the passed options are valid
# Recieves IN ORDER: options entered, valid options separated by a vertical bar
function parse_options () {
	# If options do not start with a dash, exit
	if [ ! ${1:0:1} = '-' ]
	then
		printf "ERROR: Options must start with a dash (-).\n"
		exit 1
	fi

	# If the a option is used, but not the only option, exit
	if [[ $1 =~ "a" ]] && [ ${#1} -gt 2 ]
	then
		printf "ERROR: Cannot have option \"a\" with other options.\n"
		exit 2
	fi

	# If the h option is used, but not the only option, exit
	if [[ $1 =~ "h" ]] && [ ${#1} -gt 2 ]
	then
		printf "ERROR: Cannot have option \"h\" with other options.\n"
		exit 2
	fi

	# For every character of the entered options
	# Starting at 1, because the character 0 should be a dash, not a letter
	i="1"
	j="2"
	while [ $i -lt ${#1} ]
	do
		# Get the ith character
		curr=${1:i:1}

		# If the character is not in the valid options, exit
		if [[ ! $curr =~ $2 ]]
		then
			printf "ERROR: Invalid option: "$curr".\n"
			exit 3
		fi

		# If the character repeats later, exit
		while [ $j -lt ${#1} ]
                do
                        if [ $curr = ${1:j:1} ]
                        then
                                printf "ERROR: Repeat option: "$curr".\n"
                                exit 4
                        fi
                        ((j=j+1))
                done

		# Update the positions
		((i=i+1))
		((j=i+1))
	done
}


# Parse the arguments passed to start this script
function parse_arguments () {
	# If there is a one argument, then check if it is a username
	if [ $# -eq 1 ]
	then
		OPTIONS="-a"
		USERNAME=$1
		# If it is the help option, change the guess
		if [[ ${USERNAME:0:1} = '-' ]] && [[ ${USERNAME:1:1} = 'h' ]]
		then
			OPTIONS=$1
			USERNAME=""
			parse_options $OPTIONS $VALID

		# If it is an option that is not help, exit
		elif [[ ${USERNAME:0:1} = '-' ]]
		then
			printf "Unexpected number of arguements. Follow the pattern \"unfo [options] [username]\"\n"
			exit 5
		fi

	# If there are two arguments, then it goes options then username
	elif [ $# -eq 2 ]
	then
		OPTIONS=$1
		USERNAME=$2
		parse_options $OPTIONS $VALID
		# Verify that the username does not start with a dash
		if [[ ${USERNAME:0:1} = '-' ]]
		then
			printf "Invalid username: %s\n" $USERNAME
			exit 6
		fi

	# If there are zero or more arguments, then something is wrong
	else
		printf "Unexpected number of arguements. Follow the pattern \"unfo [options] [username]\"\n"
		exit 5
	fi

	# Ensure that the user exists
	if [ ! -z $USERNAME ] && [ ! $(grep "$USERNAME" /etc/passwd | wc -l) = "1" ]
	then 
		printf "Invalid username: %s\n" $USERNAME
		exit 6
	fi
}

# Show the help page for the command
function show_help () {
	printf "Usage: unfo [OPTION]... [USER]\n"
	printf "Print a variety of different information about a user.\n"
	printf "All information is shown if none of -dhnstu is specified.\n\n"

	printf "Options:\n"
	printf " %s \t Show all of the information.\n" "-a"
	printf " %s \t Show the home directory.\n" "-d"
	printf " %s \t See this help.\n" "-h"
	printf " %s \t Show the full name.\n" "-n"
	printf " %s \t Show the status: Logged in/out.\n" "-s"
	printf " %s \t Show the time of last log in.\n" "-t"
	printf " %s \t Show the username.\n\n" "-u"

	printf "Exit status:\n"
	printf " 0 if OK,\n"
	printf " 1 if OPTION field does not start with a dash (-),\n"
	printf " 2 if %s or %s is used with any other option,\n" "-a" "-h"
	printf " 3 if invalid option,\n"
	printf " 4 if repeating option,\n"
	printf " 5 if unexpected number of arguments,\n"
	printf " 6 if user does not exist.\n"
}

# Print the username field
function username () {
	printf "%-23s" "Username:"
	echo $USERNAME
}

# Print the fullname field
function fullname () {
	printf "%-23s" "Full Name:"
	echo $(grep "$USERNAME" /etc/passwd | cut -d ':' -f 5 | sed 's/...$//')
}

# Print the home directory field
function home_dir () {
	printf "%-23s" "Home Directory:"
	echo $(grep "$USERNAME" /etc/passwd | cut -d ':' -f 6)
}

# Print the log in time field
function login_time () {
	printf "%-23s" "Time of last login:"
	echo $(last | tac | grep "$USERNAME" | tail --lines=1 | tr -s ' ' | cut -d ' ' -f 4-7)
}

# Print the status field
function status () {
	STATUS=$(last | tac | grep "$USERNAME" | tail --lines=1 | awk 'NR==1{print $NF}')

	printf "%-23s" "Status:"
	if [ -z $STATUS ]
	then
		echo ""
	elif [ $STATUS = "in" ]
	then
		echo "Logged in"
	else
		echo "Logged out"
	fi
}

function main () {
	# Show the help page
	if [[ $OPTIONS = "-h" ]]; then show_help; exit 0; fi

	# Username
	if [[ $OPTIONS =~ "u" ]] || [[ $OPTIONS =~ "a" ]]; then username; fi

	# Full Name
	if [[ $OPTIONS =~ "n" ]] || [[ $OPTIONS =~ "a" ]]; then fullname; fi

	# Home Directory
	if [[ $OPTIONS =~ "d" ]] || [[ $OPTIONS =~ "a" ]]; then home_dir; fi

	# Time of last login
	if [[ $OPTIONS =~ "t" ]] || [[ $OPTIONS =~ "a" ]]; then login_time; fi

	# If the user is currently logged in
	if [[ $OPTIONS =~ "s" ]] || [[ $OPTIONS =~ "a" ]]; then status; fi
	
	exit 0
}

parse_arguments $1 $2 $3
main
